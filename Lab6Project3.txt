// Lab 6 Project 3
// App.js

import React, { useState } from 'react';
import { View, TextInput, FlatList, Text, TouchableOpacity, StyleSheet, Alert } from 'react-native';

// Complete the program
const TaskListApp = () => {
  const [tasks, setTasks] = useState([]);
  const [taskText, setTaskText] = useState(''); // Fixed incorrect state variable

  const addTask = () => {
    if (taskText.trim() !== '') {
      const newTask = {
        id: Date.now().toString(),
        text: taskText,
        completed: false,
        important: false, // Tracks important tasks
      };
      setTasks([...tasks, newTask]);
      setTaskText('');
    }
  };

  const toggleTaskCompletion = (taskId) => {
    setTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === taskId ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const toggleTaskImportance = (taskId) => {
    setTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === taskId ? { ...task, important: !task.important } : task
      )
    );
  };

  const deleteTask = (taskId) => {
    Alert.alert(
      'Confirm deletion',
      'Are you sure you want to delete this task?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: () => {
            setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));
          },
          style: 'destructive',
        },
      ],
      { cancelable: true }
    );
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Add a new task"
        value={taskText}
        onChangeText={setTaskText}
      />
      <TouchableOpacity onPress={addTask} style={styles.addButton}>
        <Text style={styles.addButtonText}>Add Task</Text>
      </TouchableOpacity>

      <FlatList
        data={tasks}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={[styles.taskContainer, item.important && styles.importantTask]}>
            <Text
              style={[
                styles.taskText,
                item.completed && styles.completedTask,
                item.important && styles.importantText,
              ]}
            >
              {item.text}
            </Text>
            <View style={styles.taskActions}>
              <TouchableOpacity onPress={() => toggleTaskCompletion(item.id)}>
                <Text style={styles.actionButton}>{item.completed ? 'Undo' : 'Complete'}</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={() => toggleTaskImportance(item.id)}>
                <Text style={styles.actionButton}>Mark Important</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={() => deleteTask(item.id)}>
                <Text style={styles.deleteButton}>Delete</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f9f9f9' },
  input: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    paddingLeft: 10,
    marginBottom: 20,
    marginTop: 40,
  },
  addButton: {
    backgroundColor: '#4CAF50',
    padding: 10,
    borderRadius: 5,
    marginBottom: 20,
    alignItems: 'center',
  },
  addButtonText: { color: '#fff', fontSize: 16 },
  taskContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 15,
    backgroundColor: '#fff',
    marginBottom: 10,
    borderRadius: 8,
    elevation: 3,
  },
  importantTask: {
    backgroundColor: '#FFEB3B',
  },
  taskText: { fontSize: 16, flex: 1 },
  completedTask: { textDecorationLine: 'line-through', color: '#999' },
  importantText: { fontWeight: 'bold' },
  taskActions: { flexDirection: 'row', alignItems: 'center' },
  actionButton: { color: '#2196F3', marginRight: 10 },
  deleteButton: { color: '#F44336' },
});

export default TaskListApp;
